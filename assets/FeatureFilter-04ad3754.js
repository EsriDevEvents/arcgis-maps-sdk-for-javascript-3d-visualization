import{s as l,a as d}from"./Error-5cdd6e0a.js";import{t as _}from"./typedArrayUtil-bf9f210a.js";import{u}from"./aaBoundingRect-2fb32e32.js";import{b as c}from"./Polyline-82cb63bc.js";import{v as y,n as f}from"./QueryEngine-b5607f4f.js";import{J as w}from"./QueryEngineResult-0c6179e0.js";import{x as I}from"./Query-b0193ce7.js";import{a as b}from"./Pipeline-bcfa6e6b.js";import{_ as T}from"./preload-helper-41c905a7.js";import"./string-53224faa.js";import"./mathUtils-ae09f98b.js";import"./vec3-8818fe1c.js";import"./common-d0b63c2d.js";import"./vec4-c7a19f0d.js";import"./Extent-22afa84a.js";import"./jsonMap-ffa742d3.js";import"./ArrayPool-b51874dd.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-5940888c.js";import"./Ellipsoid-89682c5e.js";import"./MemCache-b4d68123.js";import"./aaBoundingBox-fb003858.js";import"./jsonUtils-36bf3d33.js";import"./normalizeUtils-353ec0fc.js";import"./normalizeUtilsCommon-d8ea404e.js";import"./geometry-7d866d3f.js";import"./typeUtils-1714017f.js";import"./request-09e7d9b2.js";import"./featureConversionUtils-aead6959.js";import"./OptimizedFeature-3e582950.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./QueryEngineCapabilities-42e44ded.js";import"./FieldsIndex-113320d3.js";import"./fieldUtils-d430f46c.js";import"./arcadeOnDemand-dd48afd7.js";import"./Scheduler-61737382.js";import"./reactiveUtils-53e5756b.js";import"./SimpleObservable-bd2c3ae8.js";import"./quantizationUtils-16db4e0b.js";import"./ItemCache-e927309e.js";import"./WhereClause-0699a2ca.js";import"./executionError-fb3f283a.js";import"./datetime-eed49b9b.js";import"./utils-95e81b90.js";import"./generateRendererUtils-e34cc2cf.js";import"./enumeration-925aa0f6.js";import"./projection-4ac247db.js";import"./mat4-f0dc8788.js";import"./assets-94d592bf.js";import"./zscale-baa108ea.js";import"./json-48e3ea08.js";import"./SnappingCandidate-970faec6.js";import"./TimeExtent-64e16588.js";import"./Field-945b2973.js";import"./fieldType-24ac97df.js";import"./Clonable-7fa7ad97.js";import"./HandleOwner-6217a02e.js";import"./TileInfo-9973cd47.js";import"./StreamFeatureManager-28e50223.js";import"./Evented-686173eb.js";import"./quickselect-56c5966e.js";import"./diffUtils-1bae97a1.js";import"./Collection-74ae958a.js";import"./ArcadeDate-9f8ea201.js";import"./arcadeTimeUtils-7457ad37.js";import"./TimeReference-adaa7961.js";import"./centroid-0766e68a.js";import"./arcgisLayerUrl-1b8d6c52.js";import"./persistableUrlUtils-3635dccc.js";import"./Connection-3d9fb42e.js";import"./ogcFeatureUtils-6af58ccf.js";import"./geojson-2fb0c3b0.js";import"./clientSideDefaults-07bb3352.js";import"./defaultsJSON-59981e75.js";import"./query-b4dff312.js";import"./pbfQueryUtils-481b10bc.js";import"./pbf-845dcafd.js";import"./queryZScale-f6e44ca7.js";import"./createConnection-7407496c.js";import"./enums-c655c737.js";import"./TileInfoView-629d0576.js";import"./TileKey-4d1284e4.js";import"./enums-fc527c7c.js";import"./number-b10bd8f5.js";const n=l.getLogger("esri.views.2d.layers.features.support.whereUtils"),g={getAttribute:(s,t)=>s.field(t)};async function v(s,t){const i=await T(()=>import("./WhereClause-0699a2ca.js").then(e=>e.W),["./WhereClause-0699a2ca.js","./string-53224faa.js","./typedArrayUtil-bf9f210a.js","./executionError-fb3f283a.js","./datetime-eed49b9b.js"],import.meta.url);try{const e=i.WhereClause.create(s,t);if(!e.isStandardized){const r=new d("mapview - bad input","Unable to apply filter's definition expression, as expression is not standardized.",e);n.error(r)}return r=>{const p=r.readArcadeFeature();return e.testFeature(p,g)}}catch{return n.warn("mapview-bad-where-clause","Encountered an error when evaluating where clause",s),r=>!0}}const m=1,E=2;class ii{constructor(t){this._geometryBounds=u(),this._idToVisibility=new Map,this._serviceInfo=t}get hash(){return this._hash}check(t){return this._applyFilter(t)}clear(){const t=this._resetAllHiddenIds();return this.update(),{show:t,hide:[]}}invalidate(){this._idToVisibility.forEach((t,i)=>{this._idToVisibility.set(i,0)})}setKnownIds(t){for(const i of t)this._idToVisibility.set(i,m)}setTrue(t){const i=[],e=[],r=new Set(t);return this._idToVisibility.forEach((p,o)=>{const h=!!(this._idToVisibility.get(o)&m),a=r.has(o);!h&&a?i.push(o):h&&!a&&e.push(o),this._idToVisibility.set(o,a?m|E:0)}),{show:i,hide:e}}createQuery(){const{geometry:t,spatialRel:i,where:e,timeExtent:r,objectIds:p}=this;return I.fromJSON({geometry:t,spatialRel:i,where:e,timeExtent:r,objectIds:p})}async update(t,i){this._hash=JSON.stringify(t);const e=await w(t,null,i);await Promise.all([this._setGeometryFilter(e),this._setIdFilter(e),this._setAttributeFilter(e),this._setTimeFilter(e)])}async _setAttributeFilter(t){if(!t||!t.where)return this._clause=null,void(this.where=null);this._clause=await v(t.where,this._serviceInfo.fieldsIndex),this.where=t.where}_setIdFilter(t){this._idsToShow=t&&t.objectIds&&new Set(t.objectIds),this._idsToHide=t&&t.hiddenIds&&new Set(t.hiddenIds),this.objectIds=t&&t.objectIds}async _setGeometryFilter(t){if(!t||!t.geometry)return this._spatialQueryOperator=null,this.geometry=null,void(this.spatialRel=null);const i=t.geometry,e=t.spatialRel||"esriSpatialRelIntersects",r=await y(e,i,this._serviceInfo.geometryType,this._serviceInfo.hasZ,this._serviceInfo.hasM);c(this._geometryBounds,i),this._spatialQueryOperator=r,this.geometry=i,this.spatialRel=e}_setTimeFilter(t){if(this.timeExtent=this._timeOperator=null,t&&t.timeExtent)if(this._serviceInfo.timeInfo)this.timeExtent=t.timeExtent,this._timeOperator=f(this._serviceInfo.timeInfo,t.timeExtent,b);else{const i=new d("feature-layer-view:time-filter-not-available","Unable to apply time filter, as layer doesn't have time metadata.",t.timeExtent);l.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter").error(i)}}_applyFilter(t){return this._filterByGeometry(t)&&this._filterById(t)&&this._filterByTime(t)&&this._filterByExpression(t)}_filterByExpression(t){return!this.where||this._clause(t)}_filterById(t){return(!this._idsToHide||!this._idsToHide.size||!this._idsToHide.has(t.getObjectId()))&&(!this._idsToShow||!this._idsToShow.size||this._idsToShow.has(t.getObjectId()))}_filterByGeometry(t){if(!this.geometry)return!0;const i=t.readHydratedGeometry();return!!i&&this._spatialQueryOperator(i)}_filterByTime(t){return!!_(this._timeOperator)||this._timeOperator(t)}_resetAllHiddenIds(){const t=[];return this._idToVisibility.forEach((i,e)=>{i&m||(this._idToVisibility.set(e,m),t.push(e))}),t}}export{ii as default};
