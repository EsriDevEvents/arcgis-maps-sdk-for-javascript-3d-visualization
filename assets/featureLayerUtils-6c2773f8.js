import{k as K,t as F,r as $}from"./typedArrayUtil-bf9f210a.js";import{s as R,a as m}from"./Error-5cdd6e0a.js";import{x as f,E as D}from"./promiseUtils-5940888c.js";import{i as w}from"./originUtils-1469eeaf.js";import q from"./FeatureLayer-e767d294.js";import{d as z}from"./arcgisLayerUrl-1b8d6c52.js";import{r as M}from"./fetchService-bf3bf196.js";import{f as U,y as Y}from"./layerUtils-eef15b39.js";import{b as _}from"./Portal-8dfa7a94.js";import j from"./PortalItem-4d7e1038.js";import{o as v}from"./jsonContext-b61ab593.js";import{i as c,a as B,c as g,u as n}from"./portalItemUtils-0655aa33.js";import"./string-53224faa.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./preload-helper-41c905a7.js";import"./jsonMap-ffa742d3.js";import"./ArrayPool-b51874dd.js";import"./nextTick-3ee5a785.js";import"./PopupTemplate-81dc9b83.js";import"./Clonable-7fa7ad97.js";import"./Collection-74ae958a.js";import"./Evented-686173eb.js";import"./SimpleObservable-bd2c3ae8.js";import"./Extent-22afa84a.js";import"./Ellipsoid-89682c5e.js";import"./fieldUtils-d430f46c.js";import"./arcadeOnDemand-dd48afd7.js";import"./geometry-7d866d3f.js";import"./Polyline-82cb63bc.js";import"./typeUtils-1714017f.js";import"./enumeration-925aa0f6.js";import"./number-036ac4ef.js";import"./locale-fe7cc1d0.js";import"./Identifiable-e4f9b04c.js";import"./UniqueValueRenderer-80c8e628.js";import"./symbols-5f42cb0e.js";import"./CIMSymbol-8f55d4ab.js";import"./Color-7b46c33a.js";import"./colorUtils-639f4d25.js";import"./mathUtils-ae09f98b.js";import"./vec3-8818fe1c.js";import"./common-d0b63c2d.js";import"./vec4-c7a19f0d.js";import"./screenUtils-410d12c0.js";import"./opacityUtils-d4a4b602.js";import"./symbolLayerUtils3D-5cf2dcce.js";import"./aaBoundingBox-fb003858.js";import"./aaBoundingRect-2fb32e32.js";import"./request-09e7d9b2.js";import"./persistableUrlUtils-3635dccc.js";import"./Symbol3DAnchorPosition2D-e9d8a8f4.js";import"./collectionUtils-423a192d.js";import"./ColorStop-29c89bbb.js";import"./reactiveUtils-53e5756b.js";import"./diffUtils-1bae97a1.js";import"./colorRamps-18bbdf60.js";import"./sizeVariableUtils-d4870b0d.js";import"./visualVariableUtils-61985981.js";import"./Graphic-5dcfa25e.js";import"./jsonUtils-36bf3d33.js";import"./compilerUtils-7bf6df9e.js";import"./lengthUtils-3c9047c4.js";import"./Loadable-40ecd3b9.js";import"./Promise-755e47e5.js";import"./PortalGroup-00fb77a4.js";import"./PortalUser-9579f611.js";import"./jsonUtils-27937179.js";import"./styleUtils-689841ac.js";import"./jsonUtils-9b4d797d.js";import"./DictionaryLoader-1c3435ac.js";import"./LRUCache-86d9ad15.js";import"./MemCache-b4d68123.js";import"./deprecate-ba25fc78.js";import"./heatmapUtils-8ee685fd.js";import"./vec4f64-6d0e93be.js";import"./MultiOriginJSONSupport-06f8f24a.js";import"./serviceCapabilitiesUtils-22f436bd.js";import"./FeatureLayerBase-633118ca.js";import"./Field-945b2973.js";import"./fieldType-24ac97df.js";import"./HeightModelInfo-73f516f9.js";import"./OperationalLayer-db187f46.js";import"./TimeExtent-64e16588.js";import"./ElevationInfo-005ddd87.js";import"./TimeReference-adaa7961.js";import"./datetime-eed49b9b.js";import"./AttachmentQuery-f1085685.js";import"./Query-b0193ce7.js";import"./RelationshipQuery-765b2184.js";import"./Layer-524734fa.js";import"./HandleOwner-6217a02e.js";import"./workers-c8fc8d43.js";import"./Connection-3d9fb42e.js";import"./assets-94d592bf.js";import"./intl-87d72dbe.js";import"./messages-1516d146.js";import"./editsZScale-9d0832b8.js";import"./queryZScale-f6e44ca7.js";import"./zscale-baa108ea.js";import"./FeatureSet-b4fbf079.js";import"./APIKeyMixin-ef4ccb38.js";import"./ArcGISService-24587a68.js";import"./BlendLayer-793ff14a.js";import"./mat4f32-60a2394b.js";import"./mat4-f0dc8788.js";import"./CustomParametersMixin-2798ec18.js";import"./EditBusLayer-b1010019.js";import"./FeatureReductionLayer-5ef01ce2.js";import"./labelingInfo-e65ecbf4.js";import"./labelUtils-b68da70f.js";import"./defaultsJSON-59981e75.js";import"./OrderedLayer-045186a6.js";import"./PortalLayer-d69e402d.js";import"./asyncUtils-24bd37b2.js";import"./RefreshableLayer-12bc7ba2.js";import"./ScaleRangeLayer-d1b04b80.js";import"./TemporalLayer-f231f22a.js";import"./FeatureTemplate-5a472038.js";import"./FeatureType-017f886c.js";import"./fieldProperties-7a0757a8.js";import"./FieldsIndex-113320d3.js";import"./versionUtils-9a1e7983.js";import"./styleUtils-5c617777.js";import"./TopFeaturesQuery-d2b31d08.js";import"./popupUtils-b8625101.js";import"./projection-4ac247db.js";const C=R.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function u(t,r){return`Layer (title: ${t.title}, id: ${t.id}) of type '${t.declaredClass}' ${r}`}function E(t,r){if(r.type!==d)throw new m("feature-layer:portal-item-wrong-type",u(t,`should have portal item of type "${d}"`))}async function J(t){if(await t.load(),U(t))throw new m("feature-layer:save",u(t,"using an in-memory source cannot be saved to a portal item"))}function G(t,r){let a=(t.messages??[]).filter(({type:o})=>o==="error").map(({name:o,message:i,details:e})=>new m(o,i,e));if(r!=null&&r.ignoreUnsupported&&(a=a.filter(({name:o})=>o!=="layer:unsupported"&&o!=="symbol:unsupported"&&o!=="symbol-layer:unsupported"&&o!=="property:unsupported"&&o!=="url:unsupported")),a.length>0)throw new m("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:a})}async function h(t,r,a){"beforeSave"in t&&typeof t.beforeSave=="function"&&await t.beforeSave();const o=t.write({},r);return G(r,a),o}function N(t){const{layer:r,layerJSON:a}=t;return r.isTable?{layers:[],tables:[a]}:{layers:[a],tables:[]}}function b(t){c(t,n.JSAPI),t.typeKeywords&&(t.typeKeywords=t.typeKeywords.filter((r,a,o)=>o.indexOf(r)===a))}function k(t){const r=t.portalItem;if(!r)throw C.error("save: requires the portalItem property to be set"),new m("feature-layer:portal-item-not-set",u(t,"requires the portalItem property to be set"));if(!r.loaded)throw new m("feature-layer:portal-item-not-loaded",u(t,"cannot be saved to a portal item that does not exist or is inaccessible"));E(t,r)}async function O(t,r){return/\/\d+\/?$/.test(t.url??"")?N(r[0]):H(t,r)}async function H(t,r){const{layer:{url:a,customParameters:o,apiKey:i}}=r[0];let e=await t.fetchData("json");e&&e.layers!=null&&e.tables!=null||(e=await Q(e,{url:a??"",customParameters:o,apiKey:i},r.map(p=>p.layer.layerId)));for(const p of r)P(p.layer,p.layerJSON,e);return e}async function Q(t,r,a){var o,i;t||(t={}),(o=t).layers||(o.layers=[]),(i=t).tables||(i.tables=[]);const{url:e,customParameters:p,apiKey:s}=r,{serviceJSON:l,layersJSON:y}=await M(e,{customParameters:p,apiKey:s}),I=x(t.layers,l.layers,a),S=x(t.tables,l.tables,a);t.layers=I.itemResources,t.tables=S.itemResources;const T=[...I.added,...S.added],L=y?[...y.layers,...y.tables]:[];return await V(t,T,e,L),t}function x(t,r,a){const o=K(t,r,(e,p)=>e.id===p.id);t=t.filter(e=>!o.removed.some(p=>p.id===e.id));const i=o.added.map(({id:e})=>({id:e}));return i.forEach(({id:e})=>{t.push({id:e})}),{itemResources:t,added:i.filter(({id:e})=>!a.includes(e))}}async function V(t,r,a,o){const i=r.map(({id:e})=>new q({url:a,layerId:e,sourceJSON:o.find(({id:p})=>p===e)}));await D(i.map(e=>e.load())),i.forEach(e=>{const{layerId:p,loaded:s,defaultPopupTemplate:l}=e;!s||F(l)||P(e,{id:p,popupInfo:l.toJSON()},t)})}function P(t,r,a){t.isTable?A(a.tables,r):A(a.layers,r)}function A(t,r){if(!t)return;const a=t.findIndex(({id:o})=>o===r.id);a===-1?t.push(r):t[a]=r}function W(t){const{portalItem:r}=t;return Y(t)&&!t.dynamicDataSource&&!!(r!=null&&r.loaded)&&r.type===d}async function X(t){if(!(t!=null&&t.length))throw new m("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(t.map(o=>o.load()));for(const o of t)if(!W(o))throw new m("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${u(o,"does not conform")}`,{layer:o});const r=t.map(o=>o.portalItem.id);if(new Set(r).size>1)throw new m("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const a=t.map(o=>o.layerId);if(new Set(a).size!==a.length)throw new m("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function Z(t,r){var a,o;let i=j.from(r);return i.id&&(i=i.clone(),i.id=null),(a=i).type??(a.type=d),(o=i).portal??(o.portal=_.getDefault()),E(t,i),i}async function tt(t,r){const{url:a,layerId:o,title:i,fullExtent:e,isTable:p}=t,s=z(a),l=$(s)&&s.serverType==="FeatureServer";r.url=l?a:`${a}/${o}`,r.title||(r.title=i),r.extent=null,!p&&$(e)&&(r.extent=await B(e)),g(r,n.METADATA),g(r,n.MULTI_LAYER),c(r,n.SINGLE_LAYER),p&&c(r,n.TABLE),b(r)}async function rt(t,r,a){var i;const o=t.portal;await(o==null?void 0:o.signIn()),await((i=o==null?void 0:o.user)==null?void 0:i.addItem({item:t,data:r,folder:a==null?void 0:a.folder}))}const go=f(ot);async function ot(t,r){await J(t),k(t);const a=t.portalItem,o=v(a),i=await h(t,o,r),e=await O(a,[{layer:t,layerJSON:i}]);return b(a),await a.update({data:e}),w(o),a}const xo=f(async(t,r)=>{await X(t);const a=t[0].portalItem,o=v(a),i=await Promise.all(t.map(p=>h(p,o,r))),e=await O(a,t.map((p,s)=>({layer:p,layerJSON:i[s]})));return b(a),await a.update({data:e}),await Promise.all(t.slice(1).map(p=>p.portalItem.reload())),w(o),a.clone()}),Ao=f(at);async function at(t,r,a){await J(t);const o=Z(t,r),i=v(o),e=N({layer:t,layerJSON:await h(t,i,a)});return await tt(t,o),await rt(o,e,a),t.portalItem=o,w(i),o}export{go as save,xo as saveAll,Ao as saveAs};
