import"./geometry-7d866d3f.js";import{r as a,e as l}from"./typedArrayUtil-bf9f210a.js";import{C as c}from"./projection-4ac247db.js";import{d as i,a as p,S as f,T as u,p as S,R as d,b as h,F as y,D as x,m as O,f as N}from"./dataUtils-95926d18.js";import{C as J,i as b}from"./utils-4b22c501.js";import{M as g,T as w,$ as B}from"./rasterProjectionHelper-61d493f4.js";import{e as m}from"./Extent-22afa84a.js";import"./ArrayPool-b51874dd.js";import"./string-53224faa.js";import"./Error-5cdd6e0a.js";import"./Polyline-82cb63bc.js";import"./jsonMap-ffa742d3.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-5940888c.js";import"./typeUtils-1714017f.js";import"./preload-helper-41c905a7.js";import"./mathUtils-ae09f98b.js";import"./vec3-8818fe1c.js";import"./common-d0b63c2d.js";import"./vec4-c7a19f0d.js";import"./SimpleObservable-bd2c3ae8.js";import"./mat4-f0dc8788.js";import"./assets-94d592bf.js";import"./request-09e7d9b2.js";import"./aaBoundingRect-2fb32e32.js";import"./Ellipsoid-89682c5e.js";import"./zscale-baa108ea.js";import"./colorUtils-c0f43caf.js";import"./Color-7b46c33a.js";import"./colorUtils-639f4d25.js";import"./enumeration-925aa0f6.js";import"./colorRamps-18bbdf60.js";class it{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),o=p(e,t.type);return Promise.resolve(a(o)?o.toJSON():null)}async decode(t){const e=await f(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?m.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(a(e)?e.toJSON():null)}async updateSymbolizer(t){var e;this.symbolizer=u.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=J(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:m.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(o=>a(o)?i.fromJSON(o):null),primaryRasterIds:t.primaryRasterIds});return a(e)?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(a(e)&&e.toJSON())}estimateStatisticsHistograms(t){const e=S(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=d(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return e&&e.forEach((o,r)=>{e.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(e)}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(n=>n?new i(n):null),o=h(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,s=o;return t.coefs&&(s=y(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=x(t.destDimension,t.gcsGrid),s=l(O(s,t.isUV?"vector-uv":"vector-magdir",r))),{pixelBlock:s==null?void 0:s.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:s}=await N(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:s.buffer},transferList:[r.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=m.fromJSON(t.projectedExtent),o=m.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new c({steps:t.datumTransformationSteps})),(t.includeGCSGrid||g(e.spatialReference,o.spatialReference,r))&&await w();const s=t.rasterTransform?b(t.rasterTransform):null;return B({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:r,rasterTransform:s})}}export{it as default};
